@startuml UML
hide circle



enum Color {
    WHITE, BLACK, NOTHING
}
struct Coordinate {
    + int row
    + int col
}

class Square {
    - Coordinate coordinate
    - Color color
    - Chess* chess
    - TextDisplay* td
    - GraphDisplay* gd
    - notifyDisplayer()
    + setChess(Chess*)
    + removeChess()
}
Square ..> Color
Square ..> Coordinate
Square ..> Chess



enum ChessType {
    Pawn, Knight, Bishop, Rook, Queen, King
}

abstract class Chess {
    - Color color
    - ChessType type
    + virtual bool isValidMove(const Board &theBoard, Coordinate begin, Coordinate end) const = 0
    + virtual bool isCheckmate(const Board &theBoard, Coordinate posi) const = 0
}
Chess ..> Color
Chess ..> ChessType

class Pawn {
    - bool isMoved
    - bool canBeEnPassant
    + bool isValidMove(const Board &theBoard, Coordinate begin, Coordinate end) const override
    + bool isCheckmate(const Board &theBoard, Coordinate posi) const override
    + void update()
}
Pawn --|> Chess

class Rook {
    - bool isMoved
    + bool isValidMove(const Board &theBoard, Coordinate begin, Coordinate end) const override
    + bool isCheckmate(const Board &theBoard, Coordinate posi) const override
}
Rook --|> Chess

class Knight {
    + bool isValidMove(const Board &theBoard, Coordinate begin, Coordinate end) const override
    + bool isCheckmate(const Board &theBoard, Coordinate posi) const override
}
Knight --|> Chess

class Bishop {
    + bool isValidMove(const Board &theBoard, Coordinate begin, Coordinate end) const override
    + bool isCheckmate(const Board &theBoard, Coordinate posi) const override
}
Bishop --|> Chess

class Queen {
    + bool isValidMove(const Board &theBoard, Coordinate begin, Coordinate end) const override
    + bool isCheckmate(const Board &theBoard, Coordinate posi) const override
}
Queen --|> Chess

class King {
    - bool isMoved
    + bool isValidMove(const Board &theBoard, Coordinate begin, Coordinate end) const override
    + bool isCheckmate(const Board &theBoard, Coordinate posi) const override
}
King --|> Chess


class Board {
    - std::vector<std::vector<Square>> grid
    - TextDisplay* (use smart_ptr) td
    - GraphDisplay* gd
    - Color currentPlayer
    - void switchPlayer()
    - void checkDraw()
    - void updateChess()
    + void initSquare() (just init square, no chess)
    + void placeChess(Coordinate, char)
    + void removeChess(Coordinate)
    + void initChessesWithDefaultArrange()
    + bool isValidSetup()
    + void moveChess(Coordinate begin, Coordinate end)
    + void endGame(Color whoWin) const

}

class TextDisplay {
    - std::vector<std::vector<char>> charGrid
    
    + void notified(Board&)

    + void printBoard()
}

class GraphDisplay {
    - const size_t WINDOW_SIZE
    - size_t sizeOfGrid
    - size_t oneSquareSize
    - size_t edgeSize
    + void notified(Board&)
}


abstract class Bot {
    - Board* theBoard
    - Color color
    + virtual void move() const = 0
}
Bot --> Board
Bot ..> Color

class BotLevel1 {

}
BotLevel1 --|> Bot

class BotLevel2 {

}
BotLevel2 --|> Bot

class BotLevel3 {

}
BotLevel3 --|> Bot

@enduml