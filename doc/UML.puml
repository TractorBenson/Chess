@startuml UML
hide circle
skinparam groupInheritance 2


enum Color { 
    WHITE, BLACK, NOTHING 
}

struct Coordinate {
    + int row
    + int col
}

enum ChessType {
    Pawn, Knight, Bishop, Rook, Queen, King
}

class Square {
    - Coordinate coordinate
    - Color color
    - Chess *chess
    - vector<Observer*>
    - notifyDisplayer() 
    + setChess(unique_ptr<Chess>)
    + removeChess()
}
Square --> TextDisplay : td <<observer>>
Square --> GraphDisplay : gd <<observer>>
Square *-- "0...1" Chess : chess


abstract class Chess {
    - Color color
    - ChessType type
    - Square *theSquare
    + virtual bool isValidMove(const Board &theBoard) = 0
    + virtual vector<Coordinate> validMoves(const Board &theBoard) const = 0
}

class Pawn {
    - bool isMoved
    - bool canBeEnPassant
    + void update()
}
Pawn --|> Chess

class Rook {
    - bool isMoved
}
Rook --|> Chess

class Knight {
}
Knight --|> Chess

class Bishop {
}
Bishop --|> Chess

class Queen {
}
Queen --|> Chess

class King {
    - bool isMoved
    + bool isChecked(const Board &theBoard)
    + bool isCheckmated(const Board &theBoard)
}
King --|> Chess


class Board {
    - vector<vector<Square>> grid
    - vector<unique_ptr<Chess>> blackChesses;
    - vector<unique_ptr<Chess>> whiteChesses;
    - vector<unique_ptr<Observer>>
    - bool checkDraw() const
    - void updateChess(Color color)
    + void initSquares()
    + void placeChess(Coordinate, char, Color)
    + void removeChess(Coordinate)
    + void initChessesWithDefaultArrange()
    + bool isValidSetup()
    + bool moveChess(Coordinate begin, Coordinate end)
    + bool isCheck() const
    + bool isCheckmate() const
}
Board *-- "8*8" Square : grid
Board *-- TextDisplay : td
Board *-- GraphDisplay : gd


class Observer {
    + virtual void notify(Square&) = 0
}

class TextDisplay {
    - vector<vector<char>> charGrid
    + ostream printBoard(ostream os)
}
TextDisplay --|> Observer

class GraphDisplay {
    - const size_t WINDOW_SIZE
    - void drawSquare(Square&)
}
GraphDisplay --|> Observer

abstract class Bot {
    - Board* theBoard
    - Color color
    + virtual vector<Coordinate> move() const = 0
}
Bot --> Board : theBoard

class BotLevel1 {

}
BotLevel1 --|> Bot

class BotLevel2 {

}
BotLevel2 --|> Bot

class BotLevel3 {

}
BotLevel3 --|> Bot

class BotLevel4 {

}
BotLevel4 --|> Bot

@enduml